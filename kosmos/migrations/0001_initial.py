# Generated by Django 3.0.6 on 2020-07-28 17:19

import colorfield.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('following', models.ManyToManyField(blank=True, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=32)),
                ('description', models.TextField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MakeupBag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bag', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MakeupProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('brand', models.CharField(max_length=32)),
                ('img', models.TextField(blank=True, validators=[django.core.validators.URLValidator()])),
                ('link', models.TextField(blank=True, unique=True, validators=[django.core.validators.URLValidator()])),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('avg_rating', models.DecimalField(decimal_places=2, max_digits=3)),
                ('product_type', models.CharField(choices=[('Bl', 'Blush'), ('Br', 'Bronzer'), ('Eb', 'Eyebrow'), ('El', 'Eyeliner'), ('Es', 'Eyeshadow'), ('F', 'Foundation'), ('Ll', 'Lip Liner'), ('Ls', 'Lipstick'), ('M', 'Mascara'), ('NP', 'Nail Polish')], max_length=32)),
                ('category', models.CharField(blank=True, choices=[('Pd', 'Powder'), ('C', 'Cream'), ('Pc', 'Pencil'), ('L', 'Liquid'), ('G', 'Gel'), ('Pl', 'Palette'), ('Ct', 'Contour'), ('BBCC', 'BB/CC'), ('Ccl', 'Concealer'), ('M', 'Mineral'), ('H', 'Highlighter'), ('Lstk', 'Lipstick'), ('Lg', 'Lip Gloss'), ('Lstn', 'Lip Stain')], max_length=16)),
                ('expiry', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('AF', 'Alcohol-Free'), ('CAN', 'Canadian'), ('CC', 'CertClean'), ('ChF', 'Chemical-Free'), ('CrF', 'Cruelty-Free'), ('DF', 'Dairy-Free'), ('EWG', 'EWG Verified'), ('EC', 'EcoCert'), ('FT', 'Fair Trade'), ('GF', 'Gluten Free'), ('H', 'Hypoallergenic'), ('N', 'Natural'), ('NT', 'No Talc'), ('NG', 'Non-GMO'), ('OF', 'Oil-Free'), ('O', 'Organic'), ('PF', 'Peanut-Free'), ('Pp', 'Purpicks'), ('SiF', 'Silicone-Free'), ('SuF', 'Sugar-Free'), ('UO', 'USDA Organic'), ('V', 'Vegan'), ('WF', 'Water-Free')], max_length=32)),
                ('tagged_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='kosmos.MakeupProduct')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('stars', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='kosmos.MakeupProduct')),
            ],
        ),
        migrations.CreateModel(
            name='MakeupBagItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open_date', models.DateField(auto_now_add=True)),
                ('expiry', models.DateField()),
                ('notes', models.TextField(blank=True)),
                ('bag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='kosmos.MakeupBag')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kosmos.MakeupProduct')),
            ],
        ),
        migrations.CreateModel(
            name='Colour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('hex_value', colorfield.fields.ColorField(default='#FF0000', max_length=18)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='colours', to='kosmos.MakeupProduct')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='kosmos.Collection')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kosmos.MakeupProduct')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionHeart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hearts', to='kosmos.Collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hearted_collections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
